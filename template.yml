AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Deploys spam-guard Lambda functions and static content with CloudFront

Parameters:
  JwtSecret:
    Type: String
    NoEcho: true
    Description: JWT secret for signing tokens

  EmailDomains:
    Type: String
    Description: JSON-encoded list of allowed email domains (e.g., ["appengine.ch"])

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 10
    MemorySize: 128
    Architectures: [arm64]

Resources:
  CreateEmailMailboxFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/lambdas/create-mailbox/
      Environment:
        Variables:
          EMAIL_DOMAINS: !Ref EmailDomains
          JWT_SECRET: !Ref JwtSecret
          TABLE_NAME: !Ref EmailsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: create-mailbox
            Method: post
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EmailsTable
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
          - npm install

  FetchEmailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/lambdas/fetch-emails/
      Environment:
        Variables:
          JWT_SECRET: !Ref JwtSecret
          TABLE_NAME: !Ref EmailsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: fetch-emails
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EmailsTable
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
          - npm install

  EmailProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/lambdas/email-processor/
      Environment:
        Variables:
          TABLE_NAME: !Ref EmailsTable
          EMAIL_STORAGE_BUCKET: !Ref EmailsS3Bucket
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EmailsTable
        - S3WritePolicy:
            BucketName: !Ref EmailsS3Bucket
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
          - npm install

  DynamoDBStreamProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/lambdas/dynamodb-stream-processor/
      Environment:
        Variables:
          EMAIL_STORAGE_BUCKET: !Ref EmailsS3Bucket
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt EmailsTable.StreamArn
            StartingPosition: TRIM_HORIZON
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref EmailsS3Bucket
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
          - npm install

  EmailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EmailsTable
      AttributeDefinitions:
        - AttributeName: emailId
          AttributeType: S
      KeySchema:
        - AttributeName: emailId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  EmailsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "spam-guard-emails-bucket-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled

  StaticAssetsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "spam-guard-static-assets-${AWS::AccountId}-${AWS::Region}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET]
            AllowedOrigins: ["*"]

  SpamGuardStaticAssetsOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: spam-guard-static-assets-oac
        Description: Access control for CloudFront to S3 static bucket
        OriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  StaticAssetsS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${StaticAssetsS3Bucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  EmailsS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EmailsS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${EmailsS3Bucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: StaticS3Origin
            DomainName: !GetAtt StaticAssetsS3Bucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref SpamGuardStaticAssetsOAC
          - Id: EmailS3Origin
            DomainName: !GetAtt EmailsS3Bucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref SpamGuardStaticAssetsOAC
          - Id: ApiOrigin
            DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only

        DefaultCacheBehavior:
          TargetOriginId: StaticS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none

        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0

          - PathPattern: "/mailbox/*"
            TargetOriginId: StaticS3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none

        ViewerCertificate:
          CloudFrontDefaultCertificate: true

Outputs:
  ApiUrl:
    Description: API Gateway endpoint
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  StaticBucketName:
    Description: Name of the S3 bucket for static files
    Value: !Ref StaticAssetsS3Bucket

  CloudFrontURL:
    Description: Access the static frontend via CloudFront
    Value: !GetAtt CloudFrontDistribution.DomainName
