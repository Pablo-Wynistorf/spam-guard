AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Deploys spam-guard Lambda functions and static content with CloudFront

Parameters:
  EmailDomains:
    Type: String
    Description: "Comma-separated list of email domains to process"

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 10
    MemorySize: 128
    Architectures: [arm64]

Resources:
  JwtSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: SpamGuardJWTSecret
      Description: Secret used to sign JWTs
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: jwtSecret
        PasswordLength: 64
        ExcludePunctuation: true

  SpamGuardApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: spam-guard-api
      EndpointConfiguration: REGIONAL

  CreateEmailMailboxFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/lambdas/create-mailbox/
      Environment:
        Variables:
          EMAIL_DOMAINS: !Ref EmailDomains
          JWT_SECRET: !Sub "{{resolve:secretsmanager:${JwtSecret}::jwtSecret}}"
          TABLE_NAME: !Ref emailsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SpamGuardApi
            Path: /api/create-mailbox
            Method: post
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref emailsTable
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
          - npm install

  FetchEmailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/lambdas/fetch-emails/
      Environment:
        Variables:
          JWT_SECRET: !Sub "{{resolve:secretsmanager:${JwtSecret}::jwtSecret}}"
          TABLE_NAME: !Ref emailsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SpamGuardApi
            Path: /api/fetch-emails
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref emailsTable
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
          - npm install

  EmailProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/lambdas/email-processor/
      Environment:
        Variables:
          TABLE_NAME: !Ref emailsTable
          EMAIL_STORAGE_BUCKET: !Ref EmailsS3Bucket
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref emailsTable
        - S3WritePolicy:
            BucketName: !Ref EmailsS3Bucket
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
          - npm install

  DynamoDBStreamProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/lambdas/dynamodb-stream-processor/
      Environment:
        Variables:
          EMAIL_STORAGE_BUCKET: !Ref EmailsS3Bucket
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt emailsTable.StreamArn
            StartingPosition: TRIM_HORIZON
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref EmailsS3Bucket
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
          - npm install

  emailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SpamGuardEmailsTable
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: emailId
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: emailId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  EmailsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "spam-guard-emails-bucket-${AWS::AccountId}-${AWS::Region}"

  StaticAssetsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "spam-guard-static-assets-${AWS::AccountId}-${AWS::Region}"
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  SpamGuardStaticAssetsOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: spam-guard-static-assets-oac
        Description: Access control for CloudFront to S3 static bucket
        SigningBehavior: always
        SigningProtocol: sigv4
        OriginAccessControlOriginType: s3

  StaticAssetsS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${StaticAssetsS3Bucket.Arn}/*"

  EmailsS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EmailsS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${EmailsS3Bucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: StaticS3Origin
            DomainName: !Select [1, !Split ["//", !GetAtt StaticAssetsS3Bucket.WebsiteURL]]
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
          - Id: EmailS3Origin
            DomainName: !GetAtt EmailsS3Bucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref SpamGuardStaticAssetsOAC
          - Id: ApiOrigin
            DomainName: !Sub "${SpamGuardApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: "/Prod"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only

        DefaultCacheBehavior:
          TargetOriginId: StaticS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none

        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0

          - PathPattern: "/emails/*"
            TargetOriginId: EmailS3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none

        ViewerCertificate:
          CloudFrontDefaultCertificate: true
    
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: SpamGuardEmailNotification
  
  SnsTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SnsTopic
      Protocol: lambda
      Endpoint: !GetAtt EmailProcessorFunction.Arn

  SesRuleSet:
    Type: AWS::SES::ReceiptRuleSet
    Properties:
      RuleSetName: SpamGuardRuleSet
      Enabled: true

  SesReceiptRule:
    Type: AWS::SES::ReceiptRule
    Properties:
      RuleSetName: SpamGuardRuleSet
      Rule:
        Name: process-email
        Enabled: true
        Recipients:
          - !Select [0, !Split [",", !Ref EmailDomains]]
        Actions:
          - SNSAction:
              TopicArn: !Ref SnsTopic
              Encoding: UTF-8
        ScanEnabled: true
        TlsPolicy: Optional


Outputs:
  CloudFrontURL:
    Description: Access the static frontend via CloudFront
    Value: !GetAtt CloudFrontDistribution.DomainName
