AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Deploys spam-guard Lambda functions and static content with CloudFront
Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 10
    MemorySize: 128
    Architectures:
    - arm64
Resources:
  CreateEmailSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: CreateEmailSessionFunction
      Events:
        Api:
          Type: Api
          Properties:
            Path: /create-email-session
            Method: post
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
        - npm install
      SamResourceId: CreateEmailSessionFunction
  FetchEmailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: FetchEmailsFunction
      Events:
        Api:
          Type: Api
          Properties:
            Path: /fetch-emails
            Method: get
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
        - npm install
      SamResourceId: FetchEmailsFunction
  EmailProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: EmailProcessorFunction
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
        - npm install
      SamResourceId: EmailProcessorFunction
  DynamoDBStreamProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: DynamoDBStreamProcessorFunction
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - EmailsTable
              - StreamArn
            StartingPosition: TRIM_HORIZON
    Metadata:
      BuildMethod: nodejs22.x
      BuildProperties:
        InstallCommands:
        - npm install
      SamResourceId: DynamoDBStreamProcessorFunction
  EmailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EmailsTable
      AttributeDefinitions:
      - AttributeName: emailId
        AttributeType: S
      KeySchema:
      - AttributeName: emailId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  EmailsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: emails-bucket-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
  StaticAssetsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: static-assets-${AWS::AccountId}-${AWS::Region}
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          AllowedOrigins:
          - '*'
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access Identity for CloudFront
  StaticAssetsS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticAssetsS3Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            CanonicalUser:
              Fn::GetAtt:
              - CloudFrontOAI
              - S3CanonicalUserId
          Action: s3:GetObject
          Resource:
            Fn::Sub: ${StaticAssetsS3Bucket.Arn}/*
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
        - Id: StaticS3Origin
          DomainName:
            Fn::GetAtt:
            - StaticAssetsS3Bucket
            - DomainName
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOAI}
        - Id: ApiOrigin
          DomainName:
            Fn::Sub: ${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: StaticS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - HEAD
          CachedMethods:
          - GET
          - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CacheBehaviors:
        - PathPattern: /api/*
          TargetOriginId: ApiOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - PATCH
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
          MinTTL: 0
          DefaultTTL: 0
          MaxTTL: 0
        - PathPattern: /mailbox/*
          TargetOriginId: StaticS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - HEAD
          CachedMethods:
          - GET
          - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
Outputs:
  ApiUrl:
    Description: API Gateway endpoint
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  StaticBucketName:
    Description: Name of the S3 bucket for static files
    Value:
      Ref: StaticAssetsS3Bucket
  CloudFrontURL:
    Description: Access the static frontend via CloudFront
    Value:
      Fn::GetAtt:
      - CloudFrontDistribution
      - DomainName
